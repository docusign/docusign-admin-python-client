# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class AssetGroupAccountCloneSourceAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'external_account_id': 'int',
        'site': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'external_account_id': 'externalAccountId',
        'site': 'site',
        'name': 'name'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AssetGroupAccountCloneSourceAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._external_account_id = None
        self._site = None
        self._name = None
        self.discriminator = None

        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('external_account_id'), kwargs.get('external_account_id', None))
        setattr(self, "_{}".format('site'), kwargs.get('site', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))

    @property
    def id(self):
        """Gets the id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501

        The source account id to clone from.  # noqa: E501

        :return: The id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetGroupAccountCloneSourceAccount.

        The source account id to clone from.  # noqa: E501

        :param id: The id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def external_account_id(self):
        """Gets the external_account_id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501

        The external account id of the source account.  # noqa: E501

        :return: The external_account_id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this AssetGroupAccountCloneSourceAccount.

        The external account id of the source account.  # noqa: E501

        :param external_account_id: The external_account_id of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def site(self):
        """Gets the site of this AssetGroupAccountCloneSourceAccount.  # noqa: E501

        The site the source account is on.  # noqa: E501

        :return: The site of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this AssetGroupAccountCloneSourceAccount.

        The site the source account is on.  # noqa: E501

        :param site: The site of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def name(self):
        """Gets the name of this AssetGroupAccountCloneSourceAccount.  # noqa: E501

        The name of the source account.  # noqa: E501

        :return: The name of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetGroupAccountCloneSourceAccount.

        The name of the source account.  # noqa: E501

        :param name: The name of this AssetGroupAccountCloneSourceAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetGroupAccountCloneSourceAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetGroupAccountCloneSourceAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetGroupAccountCloneSourceAccount):
            return True

        return self.to_dict() != other.to_dict()
