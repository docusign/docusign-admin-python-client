# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class Saml2IdentityProviderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'settings': 'list[SettingResponse]',
        'certificates': 'list[CertificateResponse]',
        'attribute_mappings': 'list[RequiredAttributeMappingResponse]'
    }

    attribute_map = {
        'issuer': 'issuer',
        'settings': 'settings',
        'certificates': 'certificates',
        'attribute_mappings': 'attribute_mappings'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """Saml2IdentityProviderResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._issuer = None
        self._settings = None
        self._certificates = None
        self._attribute_mappings = None
        self.discriminator = None

        setattr(self, "_{}".format('issuer'), kwargs.get('issuer', None))
        setattr(self, "_{}".format('settings'), kwargs.get('settings', None))
        setattr(self, "_{}".format('certificates'), kwargs.get('certificates', None))
        setattr(self, "_{}".format('attribute_mappings'), kwargs.get('attribute_mappings', None))

    @property
    def issuer(self):
        """Gets the issuer of this Saml2IdentityProviderResponse.  # noqa: E501


        :return: The issuer of this Saml2IdentityProviderResponse.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Saml2IdentityProviderResponse.


        :param issuer: The issuer of this Saml2IdentityProviderResponse.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def settings(self):
        """Gets the settings of this Saml2IdentityProviderResponse.  # noqa: E501


        :return: The settings of this Saml2IdentityProviderResponse.  # noqa: E501
        :rtype: list[SettingResponse]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Saml2IdentityProviderResponse.


        :param settings: The settings of this Saml2IdentityProviderResponse.  # noqa: E501
        :type: list[SettingResponse]
        """

        self._settings = settings

    @property
    def certificates(self):
        """Gets the certificates of this Saml2IdentityProviderResponse.  # noqa: E501


        :return: The certificates of this Saml2IdentityProviderResponse.  # noqa: E501
        :rtype: list[CertificateResponse]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this Saml2IdentityProviderResponse.


        :param certificates: The certificates of this Saml2IdentityProviderResponse.  # noqa: E501
        :type: list[CertificateResponse]
        """

        self._certificates = certificates

    @property
    def attribute_mappings(self):
        """Gets the attribute_mappings of this Saml2IdentityProviderResponse.  # noqa: E501


        :return: The attribute_mappings of this Saml2IdentityProviderResponse.  # noqa: E501
        :rtype: list[RequiredAttributeMappingResponse]
        """
        return self._attribute_mappings

    @attribute_mappings.setter
    def attribute_mappings(self, attribute_mappings):
        """Sets the attribute_mappings of this Saml2IdentityProviderResponse.


        :param attribute_mappings: The attribute_mappings of this Saml2IdentityProviderResponse.  # noqa: E501
        :type: list[RequiredAttributeMappingResponse]
        """

        self._attribute_mappings = attribute_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Saml2IdentityProviderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Saml2IdentityProviderResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Saml2IdentityProviderResponse):
            return True

        return self.to_dict() != other.to_dict()
