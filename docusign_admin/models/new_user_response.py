# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class NewUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'site_id': 'int',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'language_culture': 'str',
        'federated_status': 'str',
        'accounts': 'list[NewUserResponseAccountProperties]'
    }

    attribute_map = {
        'id': 'id',
        'site_id': 'site_id',
        'user_name': 'user_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'language_culture': 'language_culture',
        'federated_status': 'federated_status',
        'accounts': 'accounts'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """NewUserResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._site_id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._language_culture = None
        self._federated_status = None
        self._accounts = None
        self.discriminator = None

        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('site_id'), kwargs.get('site_id', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('first_name'), kwargs.get('first_name', None))
        setattr(self, "_{}".format('last_name'), kwargs.get('last_name', None))
        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('language_culture'), kwargs.get('language_culture', None))
        setattr(self, "_{}".format('federated_status'), kwargs.get('federated_status', None))
        setattr(self, "_{}".format('accounts'), kwargs.get('accounts', None))

    @property
    def id(self):
        """Gets the id of this NewUserResponse.  # noqa: E501


        :return: The id of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewUserResponse.


        :param id: The id of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this NewUserResponse.  # noqa: E501


        :return: The site_id of this NewUserResponse.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this NewUserResponse.


        :param site_id: The site_id of this NewUserResponse.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def user_name(self):
        """Gets the user_name of this NewUserResponse.  # noqa: E501


        :return: The user_name of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this NewUserResponse.


        :param user_name: The user_name of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this NewUserResponse.  # noqa: E501


        :return: The first_name of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NewUserResponse.


        :param first_name: The first_name of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NewUserResponse.  # noqa: E501


        :return: The last_name of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NewUserResponse.


        :param last_name: The last_name of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this NewUserResponse.  # noqa: E501


        :return: The email of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewUserResponse.


        :param email: The email of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def language_culture(self):
        """Gets the language_culture of this NewUserResponse.  # noqa: E501


        :return: The language_culture of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._language_culture

    @language_culture.setter
    def language_culture(self, language_culture):
        """Sets the language_culture of this NewUserResponse.


        :param language_culture: The language_culture of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._language_culture = language_culture

    @property
    def federated_status(self):
        """Gets the federated_status of this NewUserResponse.  # noqa: E501


        :return: The federated_status of this NewUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._federated_status

    @federated_status.setter
    def federated_status(self, federated_status):
        """Sets the federated_status of this NewUserResponse.


        :param federated_status: The federated_status of this NewUserResponse.  # noqa: E501
        :type: str
        """

        self._federated_status = federated_status

    @property
    def accounts(self):
        """Gets the accounts of this NewUserResponse.  # noqa: E501


        :return: The accounts of this NewUserResponse.  # noqa: E501
        :rtype: list[NewUserResponseAccountProperties]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this NewUserResponse.


        :param accounts: The accounts of this NewUserResponse.  # noqa: E501
        :type: list[NewUserResponseAccountProperties]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewUserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewUserResponse):
            return True

        return self.to_dict() != other.to_dict()
