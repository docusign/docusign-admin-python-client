# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class UserDrilldownResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'site_id': 'int',
        'site_name': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'user_status': 'str',
        'default_account_id': 'str',
        'default_account_name': 'str',
        'language_culture': 'str',
        'selected_languages': 'str',
        'federated_status': 'str',
        'is_organization_admin': 'bool',
        'created_on': 'datetime',
        'last_login': 'datetime',
        'memberships': 'list[MembershipResponse]',
        'identities': 'list[UserIdentityResponse]',
        'device_verification_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'site_id': 'site_id',
        'site_name': 'site_name',
        'user_name': 'user_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'user_status': 'user_status',
        'default_account_id': 'default_account_id',
        'default_account_name': 'default_account_name',
        'language_culture': 'language_culture',
        'selected_languages': 'selected_languages',
        'federated_status': 'federated_status',
        'is_organization_admin': 'is_organization_admin',
        'created_on': 'created_on',
        'last_login': 'last_login',
        'memberships': 'memberships',
        'identities': 'identities',
        'device_verification_enabled': 'device_verification_enabled'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserDrilldownResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._site_id = None
        self._site_name = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._user_status = None
        self._default_account_id = None
        self._default_account_name = None
        self._language_culture = None
        self._selected_languages = None
        self._federated_status = None
        self._is_organization_admin = None
        self._created_on = None
        self._last_login = None
        self._memberships = None
        self._identities = None
        self._device_verification_enabled = None
        self.discriminator = None

        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('site_id'), kwargs.get('site_id', None))
        setattr(self, "_{}".format('site_name'), kwargs.get('site_name', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))
        setattr(self, "_{}".format('first_name'), kwargs.get('first_name', None))
        setattr(self, "_{}".format('last_name'), kwargs.get('last_name', None))
        setattr(self, "_{}".format('user_status'), kwargs.get('user_status', None))
        setattr(self, "_{}".format('default_account_id'), kwargs.get('default_account_id', None))
        setattr(self, "_{}".format('default_account_name'), kwargs.get('default_account_name', None))
        setattr(self, "_{}".format('language_culture'), kwargs.get('language_culture', None))
        setattr(self, "_{}".format('selected_languages'), kwargs.get('selected_languages', None))
        setattr(self, "_{}".format('federated_status'), kwargs.get('federated_status', None))
        setattr(self, "_{}".format('is_organization_admin'), kwargs.get('is_organization_admin', None))
        setattr(self, "_{}".format('created_on'), kwargs.get('created_on', None))
        setattr(self, "_{}".format('last_login'), kwargs.get('last_login', None))
        setattr(self, "_{}".format('memberships'), kwargs.get('memberships', None))
        setattr(self, "_{}".format('identities'), kwargs.get('identities', None))
        setattr(self, "_{}".format('device_verification_enabled'), kwargs.get('device_verification_enabled', None))

    @property
    def id(self):
        """Gets the id of this UserDrilldownResponse.  # noqa: E501


        :return: The id of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDrilldownResponse.


        :param id: The id of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this UserDrilldownResponse.  # noqa: E501


        :return: The site_id of this UserDrilldownResponse.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this UserDrilldownResponse.


        :param site_id: The site_id of this UserDrilldownResponse.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this UserDrilldownResponse.  # noqa: E501


        :return: The site_name of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this UserDrilldownResponse.


        :param site_name: The site_name of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def user_name(self):
        """Gets the user_name of this UserDrilldownResponse.  # noqa: E501


        :return: The user_name of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserDrilldownResponse.


        :param user_name: The user_name of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UserDrilldownResponse.  # noqa: E501


        :return: The first_name of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDrilldownResponse.


        :param first_name: The first_name of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDrilldownResponse.  # noqa: E501


        :return: The last_name of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDrilldownResponse.


        :param last_name: The last_name of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def user_status(self):
        """Gets the user_status of this UserDrilldownResponse.  # noqa: E501


        :return: The user_status of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this UserDrilldownResponse.


        :param user_status: The user_status of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._user_status = user_status

    @property
    def default_account_id(self):
        """Gets the default_account_id of this UserDrilldownResponse.  # noqa: E501


        :return: The default_account_id of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_account_id

    @default_account_id.setter
    def default_account_id(self, default_account_id):
        """Sets the default_account_id of this UserDrilldownResponse.


        :param default_account_id: The default_account_id of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._default_account_id = default_account_id

    @property
    def default_account_name(self):
        """Gets the default_account_name of this UserDrilldownResponse.  # noqa: E501


        :return: The default_account_name of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_account_name

    @default_account_name.setter
    def default_account_name(self, default_account_name):
        """Sets the default_account_name of this UserDrilldownResponse.


        :param default_account_name: The default_account_name of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._default_account_name = default_account_name

    @property
    def language_culture(self):
        """Gets the language_culture of this UserDrilldownResponse.  # noqa: E501


        :return: The language_culture of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._language_culture

    @language_culture.setter
    def language_culture(self, language_culture):
        """Sets the language_culture of this UserDrilldownResponse.


        :param language_culture: The language_culture of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._language_culture = language_culture

    @property
    def selected_languages(self):
        """Gets the selected_languages of this UserDrilldownResponse.  # noqa: E501


        :return: The selected_languages of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._selected_languages

    @selected_languages.setter
    def selected_languages(self, selected_languages):
        """Sets the selected_languages of this UserDrilldownResponse.


        :param selected_languages: The selected_languages of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._selected_languages = selected_languages

    @property
    def federated_status(self):
        """Gets the federated_status of this UserDrilldownResponse.  # noqa: E501


        :return: The federated_status of this UserDrilldownResponse.  # noqa: E501
        :rtype: str
        """
        return self._federated_status

    @federated_status.setter
    def federated_status(self, federated_status):
        """Sets the federated_status of this UserDrilldownResponse.


        :param federated_status: The federated_status of this UserDrilldownResponse.  # noqa: E501
        :type: str
        """

        self._federated_status = federated_status

    @property
    def is_organization_admin(self):
        """Gets the is_organization_admin of this UserDrilldownResponse.  # noqa: E501


        :return: The is_organization_admin of this UserDrilldownResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_organization_admin

    @is_organization_admin.setter
    def is_organization_admin(self, is_organization_admin):
        """Sets the is_organization_admin of this UserDrilldownResponse.


        :param is_organization_admin: The is_organization_admin of this UserDrilldownResponse.  # noqa: E501
        :type: bool
        """

        self._is_organization_admin = is_organization_admin

    @property
    def created_on(self):
        """Gets the created_on of this UserDrilldownResponse.  # noqa: E501


        :return: The created_on of this UserDrilldownResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this UserDrilldownResponse.


        :param created_on: The created_on of this UserDrilldownResponse.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def last_login(self):
        """Gets the last_login of this UserDrilldownResponse.  # noqa: E501


        :return: The last_login of this UserDrilldownResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserDrilldownResponse.


        :param last_login: The last_login of this UserDrilldownResponse.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def memberships(self):
        """Gets the memberships of this UserDrilldownResponse.  # noqa: E501


        :return: The memberships of this UserDrilldownResponse.  # noqa: E501
        :rtype: list[MembershipResponse]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this UserDrilldownResponse.


        :param memberships: The memberships of this UserDrilldownResponse.  # noqa: E501
        :type: list[MembershipResponse]
        """

        self._memberships = memberships

    @property
    def identities(self):
        """Gets the identities of this UserDrilldownResponse.  # noqa: E501


        :return: The identities of this UserDrilldownResponse.  # noqa: E501
        :rtype: list[UserIdentityResponse]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserDrilldownResponse.


        :param identities: The identities of this UserDrilldownResponse.  # noqa: E501
        :type: list[UserIdentityResponse]
        """

        self._identities = identities

    @property
    def device_verification_enabled(self):
        """Gets the device_verification_enabled of this UserDrilldownResponse.  # noqa: E501


        :return: The device_verification_enabled of this UserDrilldownResponse.  # noqa: E501
        :rtype: bool
        """
        return self._device_verification_enabled

    @device_verification_enabled.setter
    def device_verification_enabled(self, device_verification_enabled):
        """Sets the device_verification_enabled of this UserDrilldownResponse.


        :param device_verification_enabled: The device_verification_enabled of this UserDrilldownResponse.  # noqa: E501
        :type: bool
        """

        self._device_verification_enabled = device_verification_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDrilldownResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDrilldownResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDrilldownResponse):
            return True

        return self.to_dict() != other.to_dict()
