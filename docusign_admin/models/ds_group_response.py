# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class DSGroupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ds_group_id': 'str',
        'account_id': 'str',
        'source_product_name': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'description': 'str',
        'is_admin': 'bool',
        'last_modified_on': 'datetime',
        'user_count': 'int',
        'external_account_id': 'int',
        'account_name': 'str'
    }

    attribute_map = {
        'ds_group_id': 'ds_group_id',
        'account_id': 'account_id',
        'source_product_name': 'source_product_name',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'description': 'description',
        'is_admin': 'is_admin',
        'last_modified_on': 'last_modified_on',
        'user_count': 'user_count',
        'external_account_id': 'external_account_id',
        'account_name': 'account_name'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DSGroupResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ds_group_id = None
        self._account_id = None
        self._source_product_name = None
        self._group_id = None
        self._group_name = None
        self._description = None
        self._is_admin = None
        self._last_modified_on = None
        self._user_count = None
        self._external_account_id = None
        self._account_name = None
        self.discriminator = None

        setattr(self, "_{}".format('ds_group_id'), kwargs.get('ds_group_id', None))
        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('source_product_name'), kwargs.get('source_product_name', None))
        setattr(self, "_{}".format('group_id'), kwargs.get('group_id', None))
        setattr(self, "_{}".format('group_name'), kwargs.get('group_name', None))
        setattr(self, "_{}".format('description'), kwargs.get('description', None))
        setattr(self, "_{}".format('is_admin'), kwargs.get('is_admin', None))
        setattr(self, "_{}".format('last_modified_on'), kwargs.get('last_modified_on', None))
        setattr(self, "_{}".format('user_count'), kwargs.get('user_count', None))
        setattr(self, "_{}".format('external_account_id'), kwargs.get('external_account_id', None))
        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))

    @property
    def ds_group_id(self):
        """Gets the ds_group_id of this DSGroupResponse.  # noqa: E501


        :return: The ds_group_id of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._ds_group_id

    @ds_group_id.setter
    def ds_group_id(self, ds_group_id):
        """Sets the ds_group_id of this DSGroupResponse.


        :param ds_group_id: The ds_group_id of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._ds_group_id = ds_group_id

    @property
    def account_id(self):
        """Gets the account_id of this DSGroupResponse.  # noqa: E501


        :return: The account_id of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DSGroupResponse.


        :param account_id: The account_id of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def source_product_name(self):
        """Gets the source_product_name of this DSGroupResponse.  # noqa: E501


        :return: The source_product_name of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_product_name

    @source_product_name.setter
    def source_product_name(self, source_product_name):
        """Sets the source_product_name of this DSGroupResponse.


        :param source_product_name: The source_product_name of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._source_product_name = source_product_name

    @property
    def group_id(self):
        """Gets the group_id of this DSGroupResponse.  # noqa: E501


        :return: The group_id of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DSGroupResponse.


        :param group_id: The group_id of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this DSGroupResponse.  # noqa: E501


        :return: The group_name of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this DSGroupResponse.


        :param group_name: The group_name of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def description(self):
        """Gets the description of this DSGroupResponse.  # noqa: E501


        :return: The description of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DSGroupResponse.


        :param description: The description of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_admin(self):
        """Gets the is_admin of this DSGroupResponse.  # noqa: E501


        :return: The is_admin of this DSGroupResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this DSGroupResponse.


        :param is_admin: The is_admin of this DSGroupResponse.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this DSGroupResponse.  # noqa: E501


        :return: The last_modified_on of this DSGroupResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this DSGroupResponse.


        :param last_modified_on: The last_modified_on of this DSGroupResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def user_count(self):
        """Gets the user_count of this DSGroupResponse.  # noqa: E501


        :return: The user_count of this DSGroupResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this DSGroupResponse.


        :param user_count: The user_count of this DSGroupResponse.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def external_account_id(self):
        """Gets the external_account_id of this DSGroupResponse.  # noqa: E501


        :return: The external_account_id of this DSGroupResponse.  # noqa: E501
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this DSGroupResponse.


        :param external_account_id: The external_account_id of this DSGroupResponse.  # noqa: E501
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def account_name(self):
        """Gets the account_name of this DSGroupResponse.  # noqa: E501


        :return: The account_name of this DSGroupResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DSGroupResponse.


        :param account_name: The account_name of this DSGroupResponse.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSGroupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSGroupResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSGroupResponse):
            return True

        return self.to_dict() != other.to_dict()
