# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class AssetGroupAccountClone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_account': 'AssetGroupAccountCloneSourceAccount',
        'target_account': 'AssetGroupAccountCloneTargetAccount',
        'asset_group_work_id': 'str',
        'asset_group_id': 'str',
        'asset_group_work_type': 'str',
        'status': 'str',
        'clone_request_id': 'str',
        'order_id': 'str',
        'attempts': 'int',
        'created_date': 'datetime',
        'created_by_name': 'str',
        'created_by_email': 'str',
        'message': 'str',
        'clone_processing_failure_details': 'SubAccountErrorDetails'
    }

    attribute_map = {
        'source_account': 'sourceAccount',
        'target_account': 'targetAccount',
        'asset_group_work_id': 'assetGroupWorkId',
        'asset_group_id': 'assetGroupId',
        'asset_group_work_type': 'assetGroupWorkType',
        'status': 'status',
        'clone_request_id': 'cloneRequestId',
        'order_id': 'orderId',
        'attempts': 'attempts',
        'created_date': 'createdDate',
        'created_by_name': 'createdByName',
        'created_by_email': 'createdByEmail',
        'message': 'message',
        'clone_processing_failure_details': 'cloneProcessingFailureDetails'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AssetGroupAccountClone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source_account = None
        self._target_account = None
        self._asset_group_work_id = None
        self._asset_group_id = None
        self._asset_group_work_type = None
        self._status = None
        self._clone_request_id = None
        self._order_id = None
        self._attempts = None
        self._created_date = None
        self._created_by_name = None
        self._created_by_email = None
        self._message = None
        self._clone_processing_failure_details = None
        self.discriminator = None

        setattr(self, "_{}".format('source_account'), kwargs.get('source_account', None))
        setattr(self, "_{}".format('target_account'), kwargs.get('target_account', None))
        setattr(self, "_{}".format('asset_group_work_id'), kwargs.get('asset_group_work_id', None))
        setattr(self, "_{}".format('asset_group_id'), kwargs.get('asset_group_id', None))
        setattr(self, "_{}".format('asset_group_work_type'), kwargs.get('asset_group_work_type', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('clone_request_id'), kwargs.get('clone_request_id', None))
        setattr(self, "_{}".format('order_id'), kwargs.get('order_id', None))
        setattr(self, "_{}".format('attempts'), kwargs.get('attempts', None))
        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('created_by_name'), kwargs.get('created_by_name', None))
        setattr(self, "_{}".format('created_by_email'), kwargs.get('created_by_email', None))
        setattr(self, "_{}".format('message'), kwargs.get('message', None))
        setattr(self, "_{}".format('clone_processing_failure_details'), kwargs.get('clone_processing_failure_details', None))

    @property
    def source_account(self):
        """Gets the source_account of this AssetGroupAccountClone.  # noqa: E501

        The source account to be cloned from.  # noqa: E501

        :return: The source_account of this AssetGroupAccountClone.  # noqa: E501
        :rtype: AssetGroupAccountCloneSourceAccount
        """
        return self._source_account

    @source_account.setter
    def source_account(self, source_account):
        """Sets the source_account of this AssetGroupAccountClone.

        The source account to be cloned from.  # noqa: E501

        :param source_account: The source_account of this AssetGroupAccountClone.  # noqa: E501
        :type: AssetGroupAccountCloneSourceAccount
        """
        if self._configuration.client_side_validation and source_account is None:
            raise ValueError("Invalid value for `source_account`, must not be `None`")  # noqa: E501

        self._source_account = source_account

    @property
    def target_account(self):
        """Gets the target_account of this AssetGroupAccountClone.  # noqa: E501

        The target account to clone to.  # noqa: E501

        :return: The target_account of this AssetGroupAccountClone.  # noqa: E501
        :rtype: AssetGroupAccountCloneTargetAccount
        """
        return self._target_account

    @target_account.setter
    def target_account(self, target_account):
        """Sets the target_account of this AssetGroupAccountClone.

        The target account to clone to.  # noqa: E501

        :param target_account: The target_account of this AssetGroupAccountClone.  # noqa: E501
        :type: AssetGroupAccountCloneTargetAccount
        """
        if self._configuration.client_side_validation and target_account is None:
            raise ValueError("Invalid value for `target_account`, must not be `None`")  # noqa: E501

        self._target_account = target_account

    @property
    def asset_group_work_id(self):
        """Gets the asset_group_work_id of this AssetGroupAccountClone.  # noqa: E501

        The account clone work id.  # noqa: E501

        :return: The asset_group_work_id of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_work_id

    @asset_group_work_id.setter
    def asset_group_work_id(self, asset_group_work_id):
        """Sets the asset_group_work_id of this AssetGroupAccountClone.

        The account clone work id.  # noqa: E501

        :param asset_group_work_id: The asset_group_work_id of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._asset_group_work_id = asset_group_work_id

    @property
    def asset_group_id(self):
        """Gets the asset_group_id of this AssetGroupAccountClone.  # noqa: E501

        The asset group id the accounts belong to.  # noqa: E501

        :return: The asset_group_id of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this AssetGroupAccountClone.

        The asset group id the accounts belong to.  # noqa: E501

        :param asset_group_id: The asset_group_id of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._asset_group_id = asset_group_id

    @property
    def asset_group_work_type(self):
        """Gets the asset_group_work_type of this AssetGroupAccountClone.  # noqa: E501

        The type of asset group work.  # noqa: E501

        :return: The asset_group_work_type of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_work_type

    @asset_group_work_type.setter
    def asset_group_work_type(self, asset_group_work_type):
        """Sets the asset_group_work_type of this AssetGroupAccountClone.

        The type of asset group work.  # noqa: E501

        :param asset_group_work_type: The asset_group_work_type of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "GroupAssetFulfillment", "AccountAssetFulfillment", "AccountAssetClone", "AccountAssetCreate", "SubscriptionSync"]  # noqa: E501
        if (self._configuration.client_side_validation and
                asset_group_work_type not in allowed_values):
            raise ValueError(
                "Invalid value for `asset_group_work_type` ({0}), must be one of {1}"  # noqa: E501
                .format(asset_group_work_type, allowed_values)
            )

        self._asset_group_work_type = asset_group_work_type

    @property
    def status(self):
        """Gets the status of this AssetGroupAccountClone.  # noqa: E501

        The clone status.  # noqa: E501

        :return: The status of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetGroupAccountClone.

        The clone status.  # noqa: E501

        :param status: The status of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "Pending", "Processing", "ProcessingOnHold", "PendingError", "ProcessingError", "Completed", "Canceled", "PermanentFailure"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def clone_request_id(self):
        """Gets the clone_request_id of this AssetGroupAccountClone.  # noqa: E501

        The account entitlement/setting mirror request id created by the clone work.  # noqa: E501

        :return: The clone_request_id of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._clone_request_id

    @clone_request_id.setter
    def clone_request_id(self, clone_request_id):
        """Sets the clone_request_id of this AssetGroupAccountClone.

        The account entitlement/setting mirror request id created by the clone work.  # noqa: E501

        :param clone_request_id: The clone_request_id of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._clone_request_id = clone_request_id

    @property
    def order_id(self):
        """Gets the order_id of this AssetGroupAccountClone.  # noqa: E501

        The order id created by the clone work.  # noqa: E501

        :return: The order_id of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this AssetGroupAccountClone.

        The order id created by the clone work.  # noqa: E501

        :param order_id: The order_id of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def attempts(self):
        """Gets the attempts of this AssetGroupAccountClone.  # noqa: E501

        The number of times the work has been worked on.  # noqa: E501

        :return: The attempts of this AssetGroupAccountClone.  # noqa: E501
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this AssetGroupAccountClone.

        The number of times the work has been worked on.  # noqa: E501

        :param attempts: The attempts of this AssetGroupAccountClone.  # noqa: E501
        :type: int
        """

        self._attempts = attempts

    @property
    def created_date(self):
        """Gets the created_date of this AssetGroupAccountClone.  # noqa: E501

        The date the account clone work is created.  # noqa: E501

        :return: The created_date of this AssetGroupAccountClone.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AssetGroupAccountClone.

        The date the account clone work is created.  # noqa: E501

        :param created_date: The created_date of this AssetGroupAccountClone.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def created_by_name(self):
        """Gets the created_by_name of this AssetGroupAccountClone.  # noqa: E501

        The name of the creator of the account clone work.  # noqa: E501

        :return: The created_by_name of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._created_by_name

    @created_by_name.setter
    def created_by_name(self, created_by_name):
        """Sets the created_by_name of this AssetGroupAccountClone.

        The name of the creator of the account clone work.  # noqa: E501

        :param created_by_name: The created_by_name of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._created_by_name = created_by_name

    @property
    def created_by_email(self):
        """Gets the created_by_email of this AssetGroupAccountClone.  # noqa: E501

        The email of the creator of the account clone work.  # noqa: E501

        :return: The created_by_email of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._created_by_email

    @created_by_email.setter
    def created_by_email(self, created_by_email):
        """Sets the created_by_email of this AssetGroupAccountClone.

        The email of the creator of the account clone work.  # noqa: E501

        :param created_by_email: The created_by_email of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._created_by_email = created_by_email

    @property
    def message(self):
        """Gets the message of this AssetGroupAccountClone.  # noqa: E501

        The message associated with the account clone work.  # noqa: E501

        :return: The message of this AssetGroupAccountClone.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssetGroupAccountClone.

        The message associated with the account clone work.  # noqa: E501

        :param message: The message of this AssetGroupAccountClone.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def clone_processing_failure_details(self):
        """Gets the clone_processing_failure_details of this AssetGroupAccountClone.  # noqa: E501

        The processing failures if the work is in PendingError/ProcessingError status.  # noqa: E501

        :return: The clone_processing_failure_details of this AssetGroupAccountClone.  # noqa: E501
        :rtype: SubAccountErrorDetails
        """
        return self._clone_processing_failure_details

    @clone_processing_failure_details.setter
    def clone_processing_failure_details(self, clone_processing_failure_details):
        """Sets the clone_processing_failure_details of this AssetGroupAccountClone.

        The processing failures if the work is in PendingError/ProcessingError status.  # noqa: E501

        :param clone_processing_failure_details: The clone_processing_failure_details of this AssetGroupAccountClone.  # noqa: E501
        :type: SubAccountErrorDetails
        """

        self._clone_processing_failure_details = clone_processing_failure_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetGroupAccountClone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetGroupAccountClone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetGroupAccountClone):
            return True

        return self.to_dict() != other.to_dict()
