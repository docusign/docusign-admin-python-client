# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class SubscriptionProvisionModelAccountCreateCreateSubAccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_details': 'SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails',
        'name': 'str',
        'country_code': 'str',
        'region': 'str',
        'site': 'str',
        'address': 'DocuSignAccountDomainModelAddress',
        'admin_user': 'SubscriptionProvisionModelAccountCreateAccountAdmin',
        'billing_profile_type': 'int'
    }

    attribute_map = {
        'subscription_details': 'SubscriptionDetails',
        'name': 'Name',
        'country_code': 'CountryCode',
        'region': 'Region',
        'site': 'Site',
        'address': 'Address',
        'admin_user': 'AdminUser',
        'billing_profile_type': 'BillingProfileType'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """SubscriptionProvisionModelAccountCreateCreateSubAccountDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subscription_details = None
        self._name = None
        self._country_code = None
        self._region = None
        self._site = None
        self._address = None
        self._admin_user = None
        self._billing_profile_type = None
        self.discriminator = None

        setattr(self, "_{}".format('subscription_details'), kwargs.get('subscription_details', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('country_code'), kwargs.get('country_code', None))
        setattr(self, "_{}".format('region'), kwargs.get('region', None))
        setattr(self, "_{}".format('site'), kwargs.get('site', None))
        setattr(self, "_{}".format('address'), kwargs.get('address', None))
        setattr(self, "_{}".format('admin_user'), kwargs.get('admin_user', None))
        setattr(self, "_{}".format('billing_profile_type'), kwargs.get('billing_profile_type', None))

    @property
    def subscription_details(self):
        """Gets the subscription_details of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The subscription_details of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails
        """
        return self._subscription_details

    @subscription_details.setter
    def subscription_details(self, subscription_details):
        """Sets the subscription_details of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param subscription_details: The subscription_details of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails
        """

        self._subscription_details = subscription_details

    @property
    def name(self):
        """Gets the name of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The name of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param name: The name of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country_code(self):
        """Gets the country_code of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The country_code of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param country_code: The country_code of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def region(self):
        """Gets the region of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The region of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param region: The region of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def site(self):
        """Gets the site of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The site of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param site: The site of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def address(self):
        """Gets the address of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The address of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: DocuSignAccountDomainModelAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param address: The address of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: DocuSignAccountDomainModelAddress
        """

        self._address = address

    @property
    def admin_user(self):
        """Gets the admin_user of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501


        :return: The admin_user of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: SubscriptionProvisionModelAccountCreateAccountAdmin
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.


        :param admin_user: The admin_user of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: SubscriptionProvisionModelAccountCreateAccountAdmin
        """

        self._admin_user = admin_user

    @property
    def billing_profile_type(self):
        """Gets the billing_profile_type of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501

        0 stands for Web, 1 stands for Direct  # noqa: E501

        :return: The billing_profile_type of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :rtype: int
        """
        return self._billing_profile_type

    @billing_profile_type.setter
    def billing_profile_type(self, billing_profile_type):
        """Sets the billing_profile_type of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.

        0 stands for Web, 1 stands for Direct  # noqa: E501

        :param billing_profile_type: The billing_profile_type of this SubscriptionProvisionModelAccountCreateCreateSubAccountDetails.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                billing_profile_type not in allowed_values):
            raise ValueError(
                "Invalid value for `billing_profile_type` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_profile_type, allowed_values)
            )

        self._billing_profile_type = billing_profile_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionProvisionModelAccountCreateCreateSubAccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionProvisionModelAccountCreateCreateSubAccountDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionProvisionModelAccountCreateCreateSubAccountDetails):
            return True

        return self.to_dict() != other.to_dict()
