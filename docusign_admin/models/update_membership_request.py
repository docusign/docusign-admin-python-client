# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class UpdateMembershipRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'permission_profile': 'PermissionProfileRequest',
        'groups': 'list[GroupRequest]',
        'company_name': 'str',
        'job_title': 'str',
        'send_activation': 'bool',
        'access_code': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'permission_profile': 'permission_profile',
        'groups': 'groups',
        'company_name': 'company_name',
        'job_title': 'job_title',
        'send_activation': 'send_activation',
        'access_code': 'access_code'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UpdateMembershipRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._permission_profile = None
        self._groups = None
        self._company_name = None
        self._job_title = None
        self._send_activation = None
        self._access_code = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('permission_profile'), kwargs.get('permission_profile', None))
        setattr(self, "_{}".format('groups'), kwargs.get('groups', None))
        setattr(self, "_{}".format('company_name'), kwargs.get('company_name', None))
        setattr(self, "_{}".format('job_title'), kwargs.get('job_title', None))
        setattr(self, "_{}".format('send_activation'), kwargs.get('send_activation', None))
        setattr(self, "_{}".format('access_code'), kwargs.get('access_code', None))

    @property
    def account_id(self):
        """Gets the account_id of this UpdateMembershipRequest.  # noqa: E501


        :return: The account_id of this UpdateMembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateMembershipRequest.


        :param account_id: The account_id of this UpdateMembershipRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def permission_profile(self):
        """Gets the permission_profile of this UpdateMembershipRequest.  # noqa: E501


        :return: The permission_profile of this UpdateMembershipRequest.  # noqa: E501
        :rtype: PermissionProfileRequest
        """
        return self._permission_profile

    @permission_profile.setter
    def permission_profile(self, permission_profile):
        """Sets the permission_profile of this UpdateMembershipRequest.


        :param permission_profile: The permission_profile of this UpdateMembershipRequest.  # noqa: E501
        :type: PermissionProfileRequest
        """

        self._permission_profile = permission_profile

    @property
    def groups(self):
        """Gets the groups of this UpdateMembershipRequest.  # noqa: E501


        :return: The groups of this UpdateMembershipRequest.  # noqa: E501
        :rtype: list[GroupRequest]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UpdateMembershipRequest.


        :param groups: The groups of this UpdateMembershipRequest.  # noqa: E501
        :type: list[GroupRequest]
        """

        self._groups = groups

    @property
    def company_name(self):
        """Gets the company_name of this UpdateMembershipRequest.  # noqa: E501


        :return: The company_name of this UpdateMembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UpdateMembershipRequest.


        :param company_name: The company_name of this UpdateMembershipRequest.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def job_title(self):
        """Gets the job_title of this UpdateMembershipRequest.  # noqa: E501


        :return: The job_title of this UpdateMembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this UpdateMembershipRequest.


        :param job_title: The job_title of this UpdateMembershipRequest.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def send_activation(self):
        """Gets the send_activation of this UpdateMembershipRequest.  # noqa: E501


        :return: The send_activation of this UpdateMembershipRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_activation

    @send_activation.setter
    def send_activation(self, send_activation):
        """Sets the send_activation of this UpdateMembershipRequest.


        :param send_activation: The send_activation of this UpdateMembershipRequest.  # noqa: E501
        :type: bool
        """

        self._send_activation = send_activation

    @property
    def access_code(self):
        """Gets the access_code of this UpdateMembershipRequest.  # noqa: E501


        :return: The access_code of this UpdateMembershipRequest.  # noqa: E501
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this UpdateMembershipRequest.


        :param access_code: The access_code of this UpdateMembershipRequest.  # noqa: E501
        :type: str
        """

        self._access_code = access_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateMembershipRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateMembershipRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateMembershipRequest):
            return True

        return self.to_dict() != other.to_dict()
