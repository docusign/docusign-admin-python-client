# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class SubscriptionProvisionModelAssetGroupWork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_group_work_id': 'str',
        'asset_group_id': 'str',
        'asset_group_work_type': 'str',
        'status': 'str',
        'order_id': 'str',
        'target_account_id': 'str',
        'source_account_id': 'str',
        'source_account_external_id': 'int',
        'source_account_name': 'str',
        'source_account_site': 'str',
        'clone_request_id': 'str',
        'clone_account_details': 'SubscriptionProvisionModelAccountCreateCreateAccountDetails',
        'create_sub_account_details': 'SubscriptionProvisionModelAccountCreateCreateSubAccountDetails',
        'attempts': 'int',
        'retry_on': 'datetime',
        'message': 'str',
        'created_by_name': 'str',
        'created_by_email': 'str',
        'error_details': 'SubscriptionProvisionModelServiceErrorDetails',
        'old_asset_group_subscription_id': 'str',
        'new_asset_group_subscription_id': 'str',
        'source_system': 'str',
        'source_id': 'str',
        'created_by': 'str',
        'created_by_type': 'int',
        'created_date': 'datetime',
        'updated_by': 'str',
        'updated_by_type': 'int',
        'updated_date': 'datetime',
        'update_history': 'list[SubscriptionProvisionModelChangeEvent]'
    }

    attribute_map = {
        'asset_group_work_id': 'AssetGroupWorkId',
        'asset_group_id': 'AssetGroupId',
        'asset_group_work_type': 'AssetGroupWorkType',
        'status': 'Status',
        'order_id': 'OrderId',
        'target_account_id': 'TargetAccountId',
        'source_account_id': 'SourceAccountId',
        'source_account_external_id': 'SourceAccountExternalId',
        'source_account_name': 'SourceAccountName',
        'source_account_site': 'SourceAccountSite',
        'clone_request_id': 'CloneRequestId',
        'clone_account_details': 'CloneAccountDetails',
        'create_sub_account_details': 'CreateSubAccountDetails',
        'attempts': 'Attempts',
        'retry_on': 'RetryOn',
        'message': 'Message',
        'created_by_name': 'CreatedByName',
        'created_by_email': 'CreatedByEmail',
        'error_details': 'ErrorDetails',
        'old_asset_group_subscription_id': 'OldAssetGroupSubscriptionId',
        'new_asset_group_subscription_id': 'NewAssetGroupSubscriptionId',
        'source_system': 'SourceSystem',
        'source_id': 'SourceId',
        'created_by': 'CreatedBy',
        'created_by_type': 'CreatedByType',
        'created_date': 'CreatedDate',
        'updated_by': 'UpdatedBy',
        'updated_by_type': 'UpdatedByType',
        'updated_date': 'UpdatedDate',
        'update_history': 'UpdateHistory'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """SubscriptionProvisionModelAssetGroupWork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_group_work_id = None
        self._asset_group_id = None
        self._asset_group_work_type = None
        self._status = None
        self._order_id = None
        self._target_account_id = None
        self._source_account_id = None
        self._source_account_external_id = None
        self._source_account_name = None
        self._source_account_site = None
        self._clone_request_id = None
        self._clone_account_details = None
        self._create_sub_account_details = None
        self._attempts = None
        self._retry_on = None
        self._message = None
        self._created_by_name = None
        self._created_by_email = None
        self._error_details = None
        self._old_asset_group_subscription_id = None
        self._new_asset_group_subscription_id = None
        self._source_system = None
        self._source_id = None
        self._created_by = None
        self._created_by_type = None
        self._created_date = None
        self._updated_by = None
        self._updated_by_type = None
        self._updated_date = None
        self._update_history = None
        self.discriminator = None

        setattr(self, "_{}".format('asset_group_work_id'), kwargs.get('asset_group_work_id', None))
        setattr(self, "_{}".format('asset_group_id'), kwargs.get('asset_group_id', None))
        setattr(self, "_{}".format('asset_group_work_type'), kwargs.get('asset_group_work_type', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('order_id'), kwargs.get('order_id', None))
        setattr(self, "_{}".format('target_account_id'), kwargs.get('target_account_id', None))
        setattr(self, "_{}".format('source_account_id'), kwargs.get('source_account_id', None))
        setattr(self, "_{}".format('source_account_external_id'), kwargs.get('source_account_external_id', None))
        setattr(self, "_{}".format('source_account_name'), kwargs.get('source_account_name', None))
        setattr(self, "_{}".format('source_account_site'), kwargs.get('source_account_site', None))
        setattr(self, "_{}".format('clone_request_id'), kwargs.get('clone_request_id', None))
        setattr(self, "_{}".format('clone_account_details'), kwargs.get('clone_account_details', None))
        setattr(self, "_{}".format('create_sub_account_details'), kwargs.get('create_sub_account_details', None))
        setattr(self, "_{}".format('attempts'), kwargs.get('attempts', None))
        setattr(self, "_{}".format('retry_on'), kwargs.get('retry_on', None))
        setattr(self, "_{}".format('message'), kwargs.get('message', None))
        setattr(self, "_{}".format('created_by_name'), kwargs.get('created_by_name', None))
        setattr(self, "_{}".format('created_by_email'), kwargs.get('created_by_email', None))
        setattr(self, "_{}".format('error_details'), kwargs.get('error_details', None))
        setattr(self, "_{}".format('old_asset_group_subscription_id'), kwargs.get('old_asset_group_subscription_id', None))
        setattr(self, "_{}".format('new_asset_group_subscription_id'), kwargs.get('new_asset_group_subscription_id', None))
        setattr(self, "_{}".format('source_system'), kwargs.get('source_system', None))
        setattr(self, "_{}".format('source_id'), kwargs.get('source_id', None))
        setattr(self, "_{}".format('created_by'), kwargs.get('created_by', None))
        setattr(self, "_{}".format('created_by_type'), kwargs.get('created_by_type', None))
        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('updated_by'), kwargs.get('updated_by', None))
        setattr(self, "_{}".format('updated_by_type'), kwargs.get('updated_by_type', None))
        setattr(self, "_{}".format('updated_date'), kwargs.get('updated_date', None))
        setattr(self, "_{}".format('update_history'), kwargs.get('update_history', None))

    @property
    def asset_group_work_id(self):
        """Gets the asset_group_work_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The asset_group_work_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_work_id

    @asset_group_work_id.setter
    def asset_group_work_id(self, asset_group_work_id):
        """Sets the asset_group_work_id of this SubscriptionProvisionModelAssetGroupWork.


        :param asset_group_work_id: The asset_group_work_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._asset_group_work_id = asset_group_work_id

    @property
    def asset_group_id(self):
        """Gets the asset_group_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The asset_group_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this SubscriptionProvisionModelAssetGroupWork.


        :param asset_group_id: The asset_group_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._asset_group_id = asset_group_id

    @property
    def asset_group_work_type(self):
        """Gets the asset_group_work_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The asset_group_work_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_work_type

    @asset_group_work_type.setter
    def asset_group_work_type(self, asset_group_work_type):
        """Sets the asset_group_work_type of this SubscriptionProvisionModelAssetGroupWork.


        :param asset_group_work_type: The asset_group_work_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "GroupAssetFulfillment", "AccountAssetFulfillment", "AccountAssetClone", "AccountAssetCreate", "SubscriptionSync"]  # noqa: E501
        if (self._configuration.client_side_validation and
                asset_group_work_type not in allowed_values):
            raise ValueError(
                "Invalid value for `asset_group_work_type` ({0}), must be one of {1}"  # noqa: E501
                .format(asset_group_work_type, allowed_values)
            )

        self._asset_group_work_type = asset_group_work_type

    @property
    def status(self):
        """Gets the status of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The status of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionProvisionModelAssetGroupWork.


        :param status: The status of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """
        allowed_values = ["Undefined", "Pending", "Processing", "ProcessingOnHold", "PendingError", "ProcessingError", "Completed", "Canceled", "PermanentFailure"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def order_id(self):
        """Gets the order_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The order_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SubscriptionProvisionModelAssetGroupWork.


        :param order_id: The order_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def target_account_id(self):
        """Gets the target_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The target_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._target_account_id

    @target_account_id.setter
    def target_account_id(self, target_account_id):
        """Sets the target_account_id of this SubscriptionProvisionModelAssetGroupWork.


        :param target_account_id: The target_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._target_account_id = target_account_id

    @property
    def source_account_id(self):
        """Gets the source_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this SubscriptionProvisionModelAssetGroupWork.


        :param source_account_id: The source_account_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._source_account_id = source_account_id

    @property
    def source_account_external_id(self):
        """Gets the source_account_external_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_account_external_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: int
        """
        return self._source_account_external_id

    @source_account_external_id.setter
    def source_account_external_id(self, source_account_external_id):
        """Sets the source_account_external_id of this SubscriptionProvisionModelAssetGroupWork.


        :param source_account_external_id: The source_account_external_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: int
        """

        self._source_account_external_id = source_account_external_id

    @property
    def source_account_name(self):
        """Gets the source_account_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_account_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._source_account_name

    @source_account_name.setter
    def source_account_name(self, source_account_name):
        """Sets the source_account_name of this SubscriptionProvisionModelAssetGroupWork.


        :param source_account_name: The source_account_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._source_account_name = source_account_name

    @property
    def source_account_site(self):
        """Gets the source_account_site of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_account_site of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._source_account_site

    @source_account_site.setter
    def source_account_site(self, source_account_site):
        """Sets the source_account_site of this SubscriptionProvisionModelAssetGroupWork.


        :param source_account_site: The source_account_site of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._source_account_site = source_account_site

    @property
    def clone_request_id(self):
        """Gets the clone_request_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The clone_request_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._clone_request_id

    @clone_request_id.setter
    def clone_request_id(self, clone_request_id):
        """Sets the clone_request_id of this SubscriptionProvisionModelAssetGroupWork.


        :param clone_request_id: The clone_request_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._clone_request_id = clone_request_id

    @property
    def clone_account_details(self):
        """Gets the clone_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The clone_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: SubscriptionProvisionModelAccountCreateCreateAccountDetails
        """
        return self._clone_account_details

    @clone_account_details.setter
    def clone_account_details(self, clone_account_details):
        """Sets the clone_account_details of this SubscriptionProvisionModelAssetGroupWork.


        :param clone_account_details: The clone_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: SubscriptionProvisionModelAccountCreateCreateAccountDetails
        """

        self._clone_account_details = clone_account_details

    @property
    def create_sub_account_details(self):
        """Gets the create_sub_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The create_sub_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: SubscriptionProvisionModelAccountCreateCreateSubAccountDetails
        """
        return self._create_sub_account_details

    @create_sub_account_details.setter
    def create_sub_account_details(self, create_sub_account_details):
        """Sets the create_sub_account_details of this SubscriptionProvisionModelAssetGroupWork.


        :param create_sub_account_details: The create_sub_account_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: SubscriptionProvisionModelAccountCreateCreateSubAccountDetails
        """

        self._create_sub_account_details = create_sub_account_details

    @property
    def attempts(self):
        """Gets the attempts of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The attempts of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this SubscriptionProvisionModelAssetGroupWork.


        :param attempts: The attempts of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: int
        """

        self._attempts = attempts

    @property
    def retry_on(self):
        """Gets the retry_on of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The retry_on of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: datetime
        """
        return self._retry_on

    @retry_on.setter
    def retry_on(self, retry_on):
        """Sets the retry_on of this SubscriptionProvisionModelAssetGroupWork.


        :param retry_on: The retry_on of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: datetime
        """

        self._retry_on = retry_on

    @property
    def message(self):
        """Gets the message of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The message of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SubscriptionProvisionModelAssetGroupWork.


        :param message: The message of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def created_by_name(self):
        """Gets the created_by_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The created_by_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._created_by_name

    @created_by_name.setter
    def created_by_name(self, created_by_name):
        """Sets the created_by_name of this SubscriptionProvisionModelAssetGroupWork.


        :param created_by_name: The created_by_name of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._created_by_name = created_by_name

    @property
    def created_by_email(self):
        """Gets the created_by_email of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The created_by_email of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._created_by_email

    @created_by_email.setter
    def created_by_email(self, created_by_email):
        """Sets the created_by_email of this SubscriptionProvisionModelAssetGroupWork.


        :param created_by_email: The created_by_email of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._created_by_email = created_by_email

    @property
    def error_details(self):
        """Gets the error_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The error_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: SubscriptionProvisionModelServiceErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this SubscriptionProvisionModelAssetGroupWork.


        :param error_details: The error_details of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: SubscriptionProvisionModelServiceErrorDetails
        """

        self._error_details = error_details

    @property
    def old_asset_group_subscription_id(self):
        """Gets the old_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The old_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._old_asset_group_subscription_id

    @old_asset_group_subscription_id.setter
    def old_asset_group_subscription_id(self, old_asset_group_subscription_id):
        """Sets the old_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.


        :param old_asset_group_subscription_id: The old_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._old_asset_group_subscription_id = old_asset_group_subscription_id

    @property
    def new_asset_group_subscription_id(self):
        """Gets the new_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The new_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._new_asset_group_subscription_id

    @new_asset_group_subscription_id.setter
    def new_asset_group_subscription_id(self, new_asset_group_subscription_id):
        """Sets the new_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.


        :param new_asset_group_subscription_id: The new_asset_group_subscription_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._new_asset_group_subscription_id = new_asset_group_subscription_id

    @property
    def source_system(self):
        """Gets the source_system of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_system of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """Sets the source_system of this SubscriptionProvisionModelAssetGroupWork.


        :param source_system: The source_system of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._source_system = source_system

    @property
    def source_id(self):
        """Gets the source_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The source_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this SubscriptionProvisionModelAssetGroupWork.


        :param source_id: The source_id of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def created_by(self):
        """Gets the created_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The created_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SubscriptionProvisionModelAssetGroupWork.


        :param created_by: The created_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_type(self):
        """Gets the created_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501

        0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted  # noqa: E501

        :return: The created_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: int
        """
        return self._created_by_type

    @created_by_type.setter
    def created_by_type(self, created_by_type):
        """Sets the created_by_type of this SubscriptionProvisionModelAssetGroupWork.

        0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted  # noqa: E501

        :param created_by_type: The created_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                created_by_type not in allowed_values):
            raise ValueError(
                "Invalid value for `created_by_type` ({0}), must be one of {1}"  # noqa: E501
                .format(created_by_type, allowed_values)
            )

        self._created_by_type = created_by_type

    @property
    def created_date(self):
        """Gets the created_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The created_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SubscriptionProvisionModelAssetGroupWork.


        :param created_date: The created_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_by(self):
        """Gets the updated_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The updated_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SubscriptionProvisionModelAssetGroupWork.


        :param updated_by: The updated_by of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_by_type(self):
        """Gets the updated_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501

        0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted  # noqa: E501

        :return: The updated_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: int
        """
        return self._updated_by_type

    @updated_by_type.setter
    def updated_by_type(self, updated_by_type):
        """Sets the updated_by_type of this SubscriptionProvisionModelAssetGroupWork.

        0 stands for Application, 1 stands for User, 2 stands for Generic, 3 stands for RestAPIAuth, 4 stands for Resource, 5 stands for Restricted  # noqa: E501

        :param updated_by_type: The updated_by_type of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                updated_by_type not in allowed_values):
            raise ValueError(
                "Invalid value for `updated_by_type` ({0}), must be one of {1}"  # noqa: E501
                .format(updated_by_type, allowed_values)
            )

        self._updated_by_type = updated_by_type

    @property
    def updated_date(self):
        """Gets the updated_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The updated_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this SubscriptionProvisionModelAssetGroupWork.


        :param updated_date: The updated_date of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def update_history(self):
        """Gets the update_history of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501


        :return: The update_history of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :rtype: list[SubscriptionProvisionModelChangeEvent]
        """
        return self._update_history

    @update_history.setter
    def update_history(self, update_history):
        """Sets the update_history of this SubscriptionProvisionModelAssetGroupWork.


        :param update_history: The update_history of this SubscriptionProvisionModelAssetGroupWork.  # noqa: E501
        :type: list[SubscriptionProvisionModelChangeEvent]
        """

        self._update_history = update_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionProvisionModelAssetGroupWork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionProvisionModelAssetGroupWork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionProvisionModelAssetGroupWork):
            return True

        return self.to_dict() != other.to_dict()
