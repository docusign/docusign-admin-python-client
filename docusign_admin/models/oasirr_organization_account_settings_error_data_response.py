# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class OASIRROrganizationAccountSettingsErrorDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'error': 'str',
        'error_key': 'str',
        'setting_key': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account_name': 'account_name',
        'error': 'error',
        'error_key': 'error_key',
        'setting_key': 'setting_key'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """OASIRROrganizationAccountSettingsErrorDataResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._error = None
        self._error_key = None
        self._setting_key = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('account_name'), kwargs.get('account_name', None))
        setattr(self, "_{}".format('error'), kwargs.get('error', None))
        setattr(self, "_{}".format('error_key'), kwargs.get('error_key', None))
        setattr(self, "_{}".format('setting_key'), kwargs.get('setting_key', None))

    @property
    def account_id(self):
        """Gets the account_id of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501


        :return: The account_id of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this OASIRROrganizationAccountSettingsErrorDataResponse.


        :param account_id: The account_id of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501


        :return: The account_name of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this OASIRROrganizationAccountSettingsErrorDataResponse.


        :param account_name: The account_name of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def error(self):
        """Gets the error of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501


        :return: The error of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this OASIRROrganizationAccountSettingsErrorDataResponse.


        :param error: The error of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_key(self):
        """Gets the error_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501


        :return: The error_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_key

    @error_key.setter
    def error_key(self, error_key):
        """Sets the error_key of this OASIRROrganizationAccountSettingsErrorDataResponse.


        :param error_key: The error_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :type: str
        """

        self._error_key = error_key

    @property
    def setting_key(self):
        """Gets the setting_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501


        :return: The setting_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._setting_key

    @setting_key.setter
    def setting_key(self, setting_key):
        """Sets the setting_key of this OASIRROrganizationAccountSettingsErrorDataResponse.


        :param setting_key: The setting_key of this OASIRROrganizationAccountSettingsErrorDataResponse.  # noqa: E501
        :type: str
        """

        self._setting_key = setting_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OASIRROrganizationAccountSettingsErrorDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OASIRROrganizationAccountSettingsErrorDataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OASIRROrganizationAccountSettingsErrorDataResponse):
            return True

        return self.to_dict() != other.to_dict()
