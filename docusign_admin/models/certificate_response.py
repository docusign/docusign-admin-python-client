# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class CertificateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'issuer': 'str',
        'thumbprint': 'str',
        'expiration_date': 'datetime',
        'is_valid': 'bool',
        'links': 'list[LinkResponse]'
    }

    attribute_map = {
        'id': 'id',
        'issuer': 'issuer',
        'thumbprint': 'thumbprint',
        'expiration_date': 'expiration_date',
        'is_valid': 'is_valid',
        'links': 'links'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """CertificateResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._issuer = None
        self._thumbprint = None
        self._expiration_date = None
        self._is_valid = None
        self._links = None
        self.discriminator = None

        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('issuer'), kwargs.get('issuer', None))
        setattr(self, "_{}".format('thumbprint'), kwargs.get('thumbprint', None))
        setattr(self, "_{}".format('expiration_date'), kwargs.get('expiration_date', None))
        setattr(self, "_{}".format('is_valid'), kwargs.get('is_valid', None))
        setattr(self, "_{}".format('links'), kwargs.get('links', None))

    @property
    def id(self):
        """Gets the id of this CertificateResponse.  # noqa: E501


        :return: The id of this CertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateResponse.


        :param id: The id of this CertificateResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this CertificateResponse.  # noqa: E501


        :return: The issuer of this CertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateResponse.


        :param issuer: The issuer of this CertificateResponse.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateResponse.  # noqa: E501


        :return: The thumbprint of this CertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateResponse.


        :param thumbprint: The thumbprint of this CertificateResponse.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CertificateResponse.  # noqa: E501


        :return: The expiration_date of this CertificateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CertificateResponse.


        :param expiration_date: The expiration_date of this CertificateResponse.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def is_valid(self):
        """Gets the is_valid of this CertificateResponse.  # noqa: E501


        :return: The is_valid of this CertificateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this CertificateResponse.


        :param is_valid: The is_valid of this CertificateResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def links(self):
        """Gets the links of this CertificateResponse.  # noqa: E501


        :return: The links of this CertificateResponse.  # noqa: E501
        :rtype: list[LinkResponse]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CertificateResponse.


        :param links: The links of this CertificateResponse.  # noqa: E501
        :type: list[LinkResponse]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateResponse):
            return True

        return self.to_dict() != other.to_dict()
