# coding: utf-8

"""
    Docusign Admin API

    An API for an organization administrator to manage organizations, accounts and users  # noqa: E501

    OpenAPI spec version: v2.1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_admin.client.configuration import Configuration


class SubscriptionProvisionModelServiceErrorDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'str',
        'public_error_code': 'str',
        'error_description': 'str',
        'is_system_error': 'bool'
    }

    attribute_map = {
        'error_code': 'ErrorCode',
        'public_error_code': 'PublicErrorCode',
        'error_description': 'ErrorDescription',
        'is_system_error': 'IsSystemError'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """SubscriptionProvisionModelServiceErrorDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_code = None
        self._public_error_code = None
        self._error_description = None
        self._is_system_error = None
        self.discriminator = None

        setattr(self, "_{}".format('error_code'), kwargs.get('error_code', None))
        setattr(self, "_{}".format('public_error_code'), kwargs.get('public_error_code', None))
        setattr(self, "_{}".format('error_description'), kwargs.get('error_description', None))
        setattr(self, "_{}".format('is_system_error'), kwargs.get('is_system_error', None))

    @property
    def error_code(self):
        """Gets the error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501


        :return: The error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SubscriptionProvisionModelServiceErrorDetails.


        :param error_code: The error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def public_error_code(self):
        """Gets the public_error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501


        :return: The public_error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._public_error_code

    @public_error_code.setter
    def public_error_code(self, public_error_code):
        """Sets the public_error_code of this SubscriptionProvisionModelServiceErrorDetails.


        :param public_error_code: The public_error_code of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :type: str
        """

        self._public_error_code = public_error_code

    @property
    def error_description(self):
        """Gets the error_description of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501


        :return: The error_description of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this SubscriptionProvisionModelServiceErrorDetails.


        :param error_description: The error_description of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def is_system_error(self):
        """Gets the is_system_error of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501


        :return: The is_system_error of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_error

    @is_system_error.setter
    def is_system_error(self, is_system_error):
        """Sets the is_system_error of this SubscriptionProvisionModelServiceErrorDetails.


        :param is_system_error: The is_system_error of this SubscriptionProvisionModelServiceErrorDetails.  # noqa: E501
        :type: bool
        """

        self._is_system_error = is_system_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionProvisionModelServiceErrorDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionProvisionModelServiceErrorDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionProvisionModelServiceErrorDetails):
            return True

        return self.to_dict() != other.to_dict()
